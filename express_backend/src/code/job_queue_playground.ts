import Queue from 'bull';
import job from '../models/jobs_model';
import { executeCpp } from './code_execution/execute_cpp';
import { executePy } from './code_execution/executePy';

const jobQueuePlayground = new Queue('job-queue-playground');
const NUM_WORKERS = 5;

interface JobData {
    id: string;
    language: 'cpp' | 'py';
    filepath: string;
    jobId: string;
    inputs: string[];
}

jobQueuePlayground.process(NUM_WORKERS, async ({ data }) => {
    const jobId = data.id;

    const jobData = await job.findById(jobId);

    if (!jobData) {
        throw new Error(`Cannot find Job with id ${jobId}`);
    }

    try {
        // finding the job with id of the job

        let output;
        // if job not found, throw error
        if (jobData === undefined) {
            throw Error(`cannot find Job with id ${jobId}`);
        }

        // writing started at time
        jobData['startedAt'] = new Date();

        //
        if (jobData.language === 'cpp') {
            // executing code for C++
            output = await executeCpp(jobData.filepath, data.inputs);
        } else if (jobData.language === 'py') {
            // executing code for python
            output = await executePy(jobData.filepath, data.inputs);
        }

        jobData['completedAt'] = new Date();

        // setting up the output generated by the code
        jobData['output'] = output;

        // output generated -> success, job executed successfully
        // doesn't matter if code contains error
        // it just shows, wheather code entered executed correctly
        // or not
        jobData['status'] = 'success';

        // saving the job
        await jobData.save();

        return true;
    } catch (err) {
        jobData['completedAt'] = new Date();
        jobData['output'] = JSON.stringify(err);
        jobData['status'] = 'error';
        await jobData.save();
        throw Error(JSON.stringify(err));
    }
});

jobQueuePlayground.on('failed', (error) => {
    console.error(error.data.id, error.failedReason);
});

const addJobToQueueForPlayground = async ({ jobId, inputs, language, filepath }: JobData) => {
    await jobQueuePlayground.add({
        id: jobId,
        inputs: inputs,
        language: language,
        filepath: filepath
    });
};

export { addJobToQueueForPlayground };

