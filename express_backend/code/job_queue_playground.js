const Queue = require('bull');
const jobs = require('../models/jobs');
const { executeCpp } = require('./code_execution/execute_cpp');
const { executePy } = require('./code_execution/executePy');

const jobQueuePlayground = new Queue('job-queue-playground');
const NUM_WORKERS = 5;

jobQueuePlayground.process(NUM_WORKERS, async ({ data }) => {
    const jobId = data.id;

    // finding the job with id of the job
    const job = await jobs.findById(jobId);

    // if job not found, throw error
    if (job === undefined) {
        throw Error(`cannot find Job with id ${jobId}`);
    }


    try {

        let output;

        // writing started at time
        job["startedAt"] = new Date();

        // 
        if (job.language === "cpp") {

            // executing code for C++
            output = await executeCpp(job.filepath, data.inputs);

        } else if (job.language === "py") {

            // executing code for python
            output = await executePy(job.filepath, data.inputs);
        }

        job["completedAt"] = new Date();

        // setting up the output generated by the code
        job["output"] = output;

        // output generated -> success, job executed successfully
        // doesn't matter if code contains error
        // it just shows, wheather code entered executed correctly
        // or not
        job["status"] = "success";

        // saving the job
        await job.save();

        return true;

    } catch (err) {
        job["completedAt"] = new Date();
        job["output"] = JSON.stringify(err);
        job["status"] = "error";
        await job.save();
        throw Error(JSON.stringify(err));
    }
})

jobQueuePlayground.on("failed", (error) => {
    console.error(error.data.id, error.failedReason);
});

const addJobToQueueForPlayground = async ({ jobId, inputs, language, filepath }) => {
    await jobQueuePlayground.add({
        id: jobId,
        inputs: inputs,
        language: language,
        filepath: filepath
    });
}

module.exports = {
    addJobToQueueForPlayground
}